# appnet.js

A library for interacting with app.net written in JavaScript. Exported
as a jQuery module.

Every method is invoked from the object found at $.appnet. At the
top level are methods for setting the access token to be used for
authentication. Aside from these utility functions, the remainder of
the operations map one-to-one onto the HTTP endpoints of the app.net
API.

## Download

The current release is at:

<ul>
  <li><a href="https://raw.github.com/duerig/appnet.js/master/dist/release/appnet.2.js">Full Source</a></li>
  <li><a href="https://raw.github.com/duerig/appnet.js/master/dist/release/appnet.2.min.js">Minified Source</a></li>
</ul>


The latest development version can be obtained at:

<ul>
  <li><a href="https://raw.github.com/duerig/appnet.js/master/dist/appnet.js">Full Source</a></li>
  <li><a href="https://raw.github.com/duerig/appnet.js/master/dist/appnet.min.js">Minified Source</a></li>
</ul>

## Example

<pre>
$.appnet.authorize("MY_USER_TOKEN");
var promise = $.appnet.post.getGlobal({ include_annotations: 1 });
promise.then(function (response) {
  console.dir(response);
  return $.appnet.post.getThread('1000', { count: 10 });
}).then(function (response) {
  console.dir(response);
}, function (response) {
  console.log('Error!');
});
</pre>

## Reference

### Utility Functions

<table>
  <thead>
    <tr>
      <th width="200">Method</th>
      <th width="240">Parameters</th>
      <th width="350">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>authorize</td>
      <td>( userToken, appToken )</td>
      <td>Sets the user and/or app tokens. Required for various calls as noted below.</td>
    </tr>
    <tr>
      <td>deauthorize</td>
      <td>( )</td>
      <td>Clears all tokens.</td>
    </tr>
    <tr>
      <td>isLogged</td>
      <td>( )</td>
      <td>Returns true if either a user or an app token has been previously provided.</td>
    </tr>
    <tr>
      <td>isApp</td>
      <td>( )</td>
      <td>Return true if an app token was previously provided.</td>
    </tr>
    <tr>
      <td>isUser</td>
      <td>( )</td>
      <td>Returns true if a user token was previously provided.</td>
    </tr>
  </tbody>
</table>

### app.net endpoints

These endpoints all return the result of invoking $.ajax() which is a
jQuery promise. You are then free to attach your own callbacks to it
etc. Typically the response you receive will be either a response
envelope with a 'data' field containing the results of your operation
on success and a 'meta' field with the response code and any other
information associated with your query.

File upload needs tested and may need a special case.

<table>
  <thead>
    <tr>
      <th width="200">Method</th>
      <th width="240">Parameters</th>
      <th width="350">Description</th>
      <th width="60">Token</th>
    </tr>
  </thead>
  <tbody>
    {{#each endpoints}}
    <tr>
      <td>{{group}}.{{name}}</td>
      <td>(
        {{#each url_params}}
          {{this}},
        {{/each}}
        {{#each data_params}}
          {{this}},
        {{/each}}
        {{#each array_params}}
          {{this}},
        {{/each}} args )</td>
      <td><a href="{{link}}">{{description}}</a></td>
      <td>{{token}}</td>
    </tr>
    {{/each}}
  </tbody>
</table>
